diff -Naurb t2/lib/chef/platform/provider_mapping.rb.orig t1/lib/chef/platform/provider_mapping.rb.orig
--- t2/lib/chef/platform/provider_mapping.rb.orig	1970-01-01 01:00:00.000000000 +0100
+++ t1/lib/chef/platform/provider_mapping.rb.orig	2014-06-07 01:49:44.000000000 +0200
@@ -0,0 +1,558 @@
+#
+# Author:: Adam Jacob (<adam@opscode.com>)
+# Copyright:: Copyright (c) 2008 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+require 'chef/config'
+require 'chef/log'
+require 'chef/mixin/params_validate'
+require 'chef/version_constraint/platform'
+
+# This file depends on nearly every provider in chef, but requiring them
+# directly causes circular requires resulting in uninitialized constant errors.
+require 'chef/provider'
+require 'chef/provider/log'
+require 'chef/provider/user'
+require 'chef/provider/group'
+require 'chef/provider/mount'
+require 'chef/provider/service'
+require 'chef/provider/package'
+require 'chef/provider/ifconfig'
+
+
+class Chef
+  class Platform
+
+    class << self
+      attr_writer :platforms
+
+      def platforms
+        @platforms ||= {
+          :mac_os_x => {
+            :default => {
+              :package => Chef::Provider::Package::Macports,
+              :service => Chef::Provider::Service::Macosx,
+              :user => Chef::Provider::User::Dscl,
+              :group => Chef::Provider::Group::Dscl
+            }
+          },
+          :mac_os_x_server => {
+            :default => {
+              :package => Chef::Provider::Package::Macports,
+              :service => Chef::Provider::Service::Macosx,
+              :user => Chef::Provider::User::Dscl,
+              :group => Chef::Provider::Group::Dscl
+            }
+          },
+          :freebsd => {
+            :default => {
+              :group   => Chef::Provider::Group::Pw,
+              :package => Chef::Provider::Package::Freebsd,
+              :service => Chef::Provider::Service::Freebsd,
+              :user    => Chef::Provider::User::Pw,
+              :cron    => Chef::Provider::Cron
+            }
+          },
+          :ubuntu   => {
+            :default => {
+              :package => Chef::Provider::Package::Apt,
+              :service => Chef::Provider::Service::Debian,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            },
+            ">= 11.10" => {
+              :ifconfig => Chef::Provider::Ifconfig::Debian
+            }
+          },
+          :gcel   => {
+            :default => {
+              :package => Chef::Provider::Package::Apt,
+              :service => Chef::Provider::Service::Debian,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :linaro   => {
+            :default => {
+              :package => Chef::Provider::Package::Apt,
+              :service => Chef::Provider::Service::Debian,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :raspbian   => {
+            :default => {
+              :package => Chef::Provider::Package::Apt,
+              :service => Chef::Provider::Service::Debian,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :linuxmint   => {
+            :default => {
+              :package => Chef::Provider::Package::Apt,
+              :service => Chef::Provider::Service::Upstart,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :debian => {
+            :default => {
+              :package => Chef::Provider::Package::Apt,
+              :service => Chef::Provider::Service::Debian,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            },
+            ">= 6.0" => {
+              :service => Chef::Provider::Service::Insserv
+            },
+            ">= 7.0" => {
+              :ifconfig => Chef::Provider::Ifconfig::Debian
+            }
+          },
+          :xenserver   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :xcp   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :centos   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm,
+              :ifconfig => Chef::Provider::Ifconfig::Redhat
+            }
+          },
+          :amazon   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :scientific => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :fedora   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm,
+              :ifconfig => Chef::Provider::Ifconfig::Redhat
+            }
+          },
+          :opensuse     => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Zypper,
+              :group => Chef::Provider::Group::Suse
+            },
+            # Only OpenSuSE 12.3+ should use the Usermod group provider:
+            ">= 12.3" => {
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :suse     => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Zypper,
+              :group => Chef::Provider::Group::Suse
+            }
+          },
+          :oracle  => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :redhat   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm,
+              :ifconfig => Chef::Provider::Ifconfig::Redhat
+            }
+          },
+          :ibm_powerkvm   => {
+            :default => {
+              :service => Chef::Provider::Service::Redhat,
+              :cron => Chef::Provider::Cron,
+              :package => Chef::Provider::Package::Yum,
+              :mdadm => Chef::Provider::Mdadm,
+              :ifconfig => Chef::Provider::Ifconfig::Redhat
+            }
+          },
+          :gentoo   => {
+            :default => {
+              :package => Chef::Provider::Package::Portage,
+              :service => Chef::Provider::Service::Gentoo,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :arch   => {
+            :default => {
+              :package => Chef::Provider::Package::Pacman,
+              :service => Chef::Provider::Service::Systemd,
+              :cron => Chef::Provider::Cron,
+              :mdadm => Chef::Provider::Mdadm
+            }
+          },
+          :mswin => {
+            :default => {
+              :env =>  Chef::Provider::Env::Windows,
+              :service => Chef::Provider::Service::Windows,
+              :user => Chef::Provider::User::Windows,
+              :group => Chef::Provider::Group::Windows,
+              :mount => Chef::Provider::Mount::Windows,
+              :batch => Chef::Provider::Batch,
+              :powershell_script => Chef::Provider::PowershellScript
+            }
+          },
+          :mingw32 => {
+            :default => {
+              :env =>  Chef::Provider::Env::Windows,
+              :service => Chef::Provider::Service::Windows,
+              :user => Chef::Provider::User::Windows,
+              :group => Chef::Provider::Group::Windows,
+              :mount => Chef::Provider::Mount::Windows,
+              :batch => Chef::Provider::Batch,
+              :powershell_script => Chef::Provider::PowershellScript
+            }
+          },
+          :windows => {
+            :default => {
+              :env =>  Chef::Provider::Env::Windows,
+              :service => Chef::Provider::Service::Windows,
+              :user => Chef::Provider::User::Windows,
+              :group => Chef::Provider::Group::Windows,
+              :mount => Chef::Provider::Mount::Windows,
+              :batch => Chef::Provider::Batch,
+              :powershell_script => Chef::Provider::PowershellScript
+            }
+          },
+          :solaris  => {},
+          :openindiana => {
+            :default => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::Ips,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :opensolaris => {
+            :default => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::Ips,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :nexentacore => {
+            :default => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::Solaris,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :omnios => {
+            :default => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::Ips,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod,
+              :user => Chef::Provider::User::Solaris,
+            }
+          },
+          :solaris2 => {
+            :default => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::Ips,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod,
+              :user => Chef::Provider::User::Solaris,
+            },
+            "< 5.11" => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::Solaris,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod,
+              :user => Chef::Provider::User::Solaris,
+            }
+          },
+          :smartos => {
+            :default => {
+              :service => Chef::Provider::Service::Solaris,
+              :package => Chef::Provider::Package::SmartOS,
+              :cron => Chef::Provider::Cron::Solaris,
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :netbsd => {
+            :default => {
+              :service => Chef::Provider::Service::Freebsd,
+              :group => Chef::Provider::Group::Groupmod
+            }
+          },
+          :openbsd => {
+            :default => {
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :hpux => {
+            :default => {
+              :group => Chef::Provider::Group::Usermod
+            }
+          },
+          :aix => {
+            :default => {
+              :group => Chef::Provider::Group::Aix,
+              :mount => Chef::Provider::Mount::Aix,
+              :ifconfig => Chef::Provider::Ifconfig::Aix,
+              :cron => Chef::Provider::Cron::Aix,
+              :package => Chef::Provider::Package::Aix
+            }
+          },
+          :default  => {
+            :file => Chef::Provider::File,
+            :directory => Chef::Provider::Directory,
+            :link => Chef::Provider::Link,
+            :template => Chef::Provider::Template,
+            :remote_directory => Chef::Provider::RemoteDirectory,
+            :execute => Chef::Provider::Execute,
+            :mount => Chef::Provider::Mount::Mount,
+            :script => Chef::Provider::Script,
+            :service => Chef::Provider::Service::Init,
+            :perl => Chef::Provider::Script,
+            :python => Chef::Provider::Script,
+            :ruby => Chef::Provider::Script,
+            :bash => Chef::Provider::Script,
+            :csh => Chef::Provider::Script,
+            :user => Chef::Provider::User::Useradd,
+            :group => Chef::Provider::Group::Gpasswd,
+            :http_request => Chef::Provider::HttpRequest,
+            :route => Chef::Provider::Route,
+            :ifconfig => Chef::Provider::Ifconfig,
+            :ruby_block => Chef::Provider::RubyBlock,
+            :whyrun_safe_ruby_block => Chef::Provider::WhyrunSafeRubyBlock,
+            :erl_call => Chef::Provider::ErlCall,
+            :log => Chef::Provider::Log::ChefLog
+          }
+        }
+      end
+
+      include Chef::Mixin::ParamsValidate
+
+      def find(name, version)
+        provider_map = platforms[:default].clone
+
+        name_sym = name
+        if name.kind_of?(String)
+          name.downcase!
+          name.gsub!(/\s/, "_")
+          name_sym = name.to_sym
+        end
+
+        if platforms.has_key?(name_sym)
+          platform_versions = platforms[name_sym].select {|k, v| k != :default }
+          if platforms[name_sym].has_key?(:default)
+            provider_map.merge!(platforms[name_sym][:default])
+          end
+          platform_versions.each do |platform_version, provider|
+            begin
+              version_constraint = Chef::VersionConstraint::Platform.new(platform_version)
+              if version_constraint.include?(version)
+                Chef::Log.debug("Platform #{name.to_s} version #{version} found")
+                provider_map.merge!(provider)
+              end
+            rescue Chef::Exceptions::InvalidPlatformVersion
+              Chef::Log.debug("Chef::Version::Comparable does not know how to parse the platform version: #{version}")
+            end
+          end
+        else
+          Chef::Log.debug("Platform #{name} not found, using all defaults. (Unsupported platform?)")
+        end
+        provider_map
+      end
+
+      def find_platform_and_version(node)
+        platform = nil
+        version = nil
+
+        if node[:platform]
+          platform = node[:platform]
+        elsif node.attribute?("os")
+          platform = node[:os]
+        end
+
+        raise ArgumentError, "Cannot find a platform for #{node}" unless platform
+
+        if node[:platform_version]
+          version = node[:platform_version]
+        elsif node[:os_version]
+          version = node[:os_version]
+        elsif node[:os_release]
+          version = node[:os_release]
+        end
+
+        raise ArgumentError, "Cannot find a version for #{node}" unless version
+
+        return platform, version
+      end
+
+      def provider_for_resource(resource, action=:nothing)
+        node = resource.run_context && resource.run_context.node
+        raise ArgumentError, "Cannot find the provider for a resource with no run context set" unless node
+        provider = find_provider_for_node(node, resource).new(resource, resource.run_context)
+        provider.action = action
+        provider
+      end
+
+      def provider_for_node(node, resource_type)
+        raise NotImplementedError, "#{self.class.name} no longer supports #provider_for_node"
+        find_provider_for_node(node, resource_type).new(node, resource_type)
+      end
+
+      def find_provider_for_node(node, resource_type)
+        platform, version = find_platform_and_version(node)
+        find_provider(platform, version, resource_type)
+      end
+
+      def set(args)
+        validate(
+          args,
+          {
+            :platform => {
+              :kind_of => Symbol,
+              :required => false,
+            },
+            :version => {
+              :kind_of => String,
+              :required => false,
+            },
+            :resource => {
+              :kind_of => Symbol,
+            },
+            :provider => {
+              :kind_of => [ String, Symbol, Class ],
+            }
+          }
+        )
+        if args.has_key?(:platform)
+          if args.has_key?(:version)
+            if platforms.has_key?(args[:platform])
+              if platforms[args[:platform]].has_key?(args[:version])
+                platforms[args[:platform]][args[:version]][args[:resource].to_sym] = args[:provider]
+              else
+                platforms[args[:platform]][args[:version]] = {
+                  args[:resource].to_sym => args[:provider]
+                }
+              end
+            else
+              platforms[args[:platform]] = {
+                args[:version] => {
+                  args[:resource].to_sym => args[:provider]
+                }
+              }
+            end
+          else
+            if platforms.has_key?(args[:platform])
+              if platforms[args[:platform]].has_key?(:default)
+                platforms[args[:platform]][:default][args[:resource].to_sym] = args[:provider]
+              else
+                platforms[args[:platform]] = { :default => { args[:resource].to_sym => args[:provider] } }
+              end
+            else
+              platforms[args[:platform]] = {
+                :default => {
+                  args[:resource].to_sym => args[:provider]
+                }
+              }
+            end
+          end
+        else
+          if platforms.has_key?(:default)
+            platforms[:default][args[:resource].to_sym] = args[:provider]
+          else
+            platforms[:default] = {
+              args[:resource].to_sym => args[:provider]
+            }
+          end
+        end
+      end
+
+      def find_provider(platform, version, resource_type)
+        provider_klass = explicit_provider(platform, version, resource_type) ||
+                         platform_provider(platform, version, resource_type) ||
+                         resource_matching_provider(platform, version, resource_type)
+
+        raise ArgumentError, "Cannot find a provider for #{resource_type} on #{platform} version #{version}" if provider_klass.nil?
+
+        provider_klass
+      end
+
+      private
+
+        def explicit_provider(platform, version, resource_type)
+          resource_type.kind_of?(Chef::Resource) ? resource_type.provider : nil
+        end
+
+        def platform_provider(platform, version, resource_type)
+          pmap = Chef::Platform.find(platform, version)
+          rtkey = resource_type.kind_of?(Chef::Resource) ? resource_type.resource_name.to_sym : resource_type
+          pmap.has_key?(rtkey) ? pmap[rtkey] : nil
+        end
+
+        def resource_matching_provider(platform, version, resource_type)
+          if resource_type.kind_of?(Chef::Resource)
+            begin
+              Chef::Provider.const_get(resource_type.class.to_s.split('::').last)
+            rescue NameError
+              nil
+            end
+          else
+            nil
+          end
+        end
+
+    end
+  end
+end
diff -Naurb t2/lib/chef/provider/package/paludis.rb t1/lib/chef/provider/package/paludis.rb
--- t2/lib/chef/provider/package/paludis.rb	1970-01-01 01:00:00.000000000 +0100
+++ t1/lib/chef/provider/package/paludis.rb	2014-07-23 02:54:59.999251289 +0200
@@ -0,0 +1,91 @@
+#
+# Author:: Vasiliy Tolstov (<v.tolstov@selfip.ru>)
+# Copyright:: Copyright (c) 2014 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+require 'chef/provider/package'
+require 'chef/resource/package'
+require 'chef/mixin/shell_out'
+
+class Chef
+  class Provider
+    class Package
+      class Paludis < Chef::Provider::Package
+
+        include Chef::Mixin::ShellOut
+
+        def load_current_resource
+          @current_resource = Chef::Resource::Package.new(@new_resource.package_name)
+          @current_resource.package_name(@new_resource.package_name)
+
+          @current_resource.version(nil)
+
+          Chef::Log.debug("Checking package status for #{@new_resource.package_name}")
+          installed = false
+          re = Regexp.new('(.*)[[:blank:]](.*)[[:blank:]](.*)$')
+
+          shell_out!("cave -L warning print-ids -m \"*/#{@new_resource.package_name.split('/').last}\" -f \"%c/%p %v %r\n\"").stdout.each_line do |line|
+            res = re.match(line)
+            unless res.nil?
+              case res[3]
+              when 'accounts', 'installed-accounts'
+                next
+              when 'installed'
+                installed = true
+                @current_resource.version(res[2])
+              else
+                @candidate_version = res[2]
+                @current_resource.version(nil)              
+              end
+            end
+          end
+
+          @current_resource
+        end
+
+        def install_package(name, version)
+          if(version)
+            pkg = "=#{name}-#{version}"
+          else
+            pkg = "#{@new_resource.package_name}"
+          end
+          shell_out!("cave -L warning resolve -x#{expand_options(@new_resource.options)} \"#{pkg}\"")
+        end
+
+        def upgrade_package(name, version)
+          install_package(name, version)
+        end
+
+        def remove_package(name, version)
+          if(version)
+            pkg = "=#{@new_resource.package_name}-#{version}"
+          else
+            pkg = "#{@new_resource.package_name}"
+          end
+
+          shell_out!("cave -L warning uninstall -x#{expand_options(@new_resource.options)} \"#{pkg}\"")
+        end
+
+        def purge_package(name, version)
+          remove_package(name, version)
+        end
+
+      end
+    end
+  end
+end
+
+
diff -Naurb t2/lib/chef/providers.rb t1/lib/chef/providers.rb
--- t2/lib/chef/providers.rb	2014-06-07 01:49:44.000000000 +0200
+++ t1/lib/chef/providers.rb	2014-07-23 02:54:59.994248791 +0200
@@ -60,6 +60,7 @@
 require 'chef/provider/package/macports'
 require 'chef/provider/package/pacman'
 require 'chef/provider/package/portage'
+require 'chef/provider/package/paludis'
 require 'chef/provider/package/rpm'
 require 'chef/provider/package/rubygems'
 require 'chef/provider/package/yum'
diff -Naurb t2/lib/chef/resource/paludis_package.rb t1/lib/chef/resource/paludis_package.rb
--- t2/lib/chef/resource/paludis_package.rb	1970-01-01 01:00:00.000000000 +0100
+++ t1/lib/chef/resource/paludis_package.rb	2014-07-23 02:54:59.994248791 +0200
@@ -0,0 +1,33 @@
+#
+# Author:: Vasiliy Tolstov (<v.tolstov@selfip.ru>)
+# Copyright:: Copyright (c) 2014 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+require 'chef/resource/package'
+require 'chef/provider/package/paludis'
+
+class Chef
+  class Resource
+    class PaludisPackage < Chef::Resource::Package
+      def initialize(name, run_context=nil)
+        super(name, run_context)
+        @resource_name = :paludis_package
+        @provider = Chef::Provider::Package::Paludis
+        @allowed_actions = [ :install, :remove, :upgrade ]
+      end
+    end
+  end
+end
diff -Naurb t2/lib/chef/resources.rb t1/lib/chef/resources.rb
--- t2/lib/chef/resources.rb	2014-06-07 01:49:44.000000000 +0200
+++ t1/lib/chef/resources.rb	2014-07-23 02:54:59.994248791 +0200
@@ -48,6 +48,7 @@
 require 'chef/resource/ohai'
 require 'chef/resource/package'
 require 'chef/resource/pacman_package'
+require 'chef/resource/paludis_package'
 require 'chef/resource/perl'
 require 'chef/resource/portage_package'
 require 'chef/resource/powershell_script'
diff -Naurb t2/spec/unit/provider/package/paludis_spec.rb t1/spec/unit/provider/package/paludis_spec.rb
--- t2/spec/unit/provider/package/paludis_spec.rb	1970-01-01 01:00:00.000000000 +0100
+++ t1/spec/unit/provider/package/paludis_spec.rb	2014-07-23 02:54:59.998250790 +0200
@@ -0,0 +1,135 @@
+#
+# Author:: Vasiliy Tolstov <v.tolstov@selfip.ru>
+# Copyright:: Copyright (c) 2014 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+require 'spec_helper'
+require 'ostruct'
+
+# based on the ips specs
+
+describe Chef::Provider::Package::Paludis do
+  before(:each) do
+    @node = Chef::Node.new
+    @events = Chef::EventDispatch::Dispatcher.new
+    @run_context = Chef::RunContext.new(@node, {}, @events)
+    @new_resource = Chef::Resource::Package.new("net/ntp")
+    @current_resource = Chef::Resource::Package.new("net/ntp")
+    Chef::Resource::Package.stub(:new).and_return(@current_resource)
+    @provider = Chef::Provider::Package::Paludis.new(@new_resource, @run_context)
+
+    @stdin = StringIO.new
+    @stderr = StringIO.new
+    @stdout =<<-PKG_STATUS
+group/ntp 0 accounts
+group/ntp 0 installed-accounts
+net/ntp 4.2.6_p5-r2 arbor
+user/ntp 0 accounts
+user/ntp 0 installed-accounts
+net/ntp 4.2.6_p5-r1 installed
+PKG_STATUS
+    @pid = 12345
+    @shell_out = OpenStruct.new(:stdout => @stdout,:stdin => @stdin,:stderr => @stderr,:status => @status,:exitstatus => 0)
+  end
+
+  context "when loading current resource" do
+    it "should create a current resource with the name of the new_resource" do
+      @provider.should_receive(:shell_out!).and_return(@shell_out)
+      Chef::Resource::Package.should_receive(:new).and_return(@current_resource)
+      @provider.load_current_resource
+    end
+
+    it "should set the current resources package name to the new resources package name" do
+      @provider.should_receive(:shell_out!).and_return(@shell_out)
+      @current_resource.should_receive(:package_name).with(@new_resource.package_name)
+      @provider.load_current_resource
+    end
+
+    it "should run pkg info with the package name" do
+      @provider.should_receive(:shell_out!).with("cave -L warning print-ids -m \"*/#{@new_resource.package_name.split('/').last}\" -f \"%c/%p %v %r\n\"").and_return(@shell_out)
+      @provider.load_current_resource
+    end
+
+    it "should return new version if package is installed" do
+      @stdout.replace(<<-INSTALLED)
+group/ntp 0 accounts
+group/ntp 0 installed-accounts
+net/ntp 4.2.6_p5-r2 arbor
+user/ntp 0 accounts
+user/ntp 0 installed-accounts
+net/ntp 4.2.6_p5-r1 installed
+INSTALLED
+      @provider.should_receive(:shell_out!).and_return(@shell_out)
+      @provider.load_current_resource
+      @current_resource.version.should == "4.2.6_p5-r1"
+      @provider.candidate_version.should eql("4.2.6_p5-r2")
+    end
+
+    it "should return the current resource" do
+      @provider.should_receive(:shell_out!).and_return(@shell_out)
+      @provider.load_current_resource.should eql(@current_resource)
+    end
+  end
+
+  context "when installing a package" do
+    it "should run pkg install with the package name and version" do
+      @provider.should_receive(:shell_out!).with("cave -L warning resolve -x \"=net/ntp-4.2.6_p5-r2\"")
+      @provider.install_package("net/ntp", "4.2.6_p5-r2")
+    end
+
+
+    it "should run pkg install with the package name and version and options if specified" do
+      @provider.should_receive(:shell_out!).with("cave -L warning resolve -x --preserve-world \"=net/ntp-4.2.6_p5-r2\"")
+      @new_resource.stub(:options).and_return("--preserve-world")
+      @provider.install_package("net/ntp", "4.2.6_p5-r2")
+    end
+
+    it "should not contain invalid characters for the version string" do
+      @stdout.replace(<<-PKG_STATUS)
+sys-process/lsof 4.87 arbor
+sys-process/lsof 4.87 x86_64
+PKG_STATUS
+      @provider.should_receive(:shell_out!).with("cave -L warning resolve -x \"=sys-process/lsof-4.87\"")
+      @provider.install_package("sys-process/lsof", "4.87")
+    end
+
+    it "should not include the human-readable version in the candidate_version" do
+      @stdout.replace(<<-PKG_STATUS)
+sys-process/lsof 4.87 arbor
+sys-process/lsof 4.87 x86_64
+PKG_STATUS
+      @provider.should_receive(:shell_out!).and_return(@shell_out)
+      @provider.load_current_resource
+      @current_resource.version.should be_nil
+      @provider.candidate_version.should eql("4.87")
+    end
+  end
+
+  context "when upgrading a package" do
+    it "should run pkg install with the package name and version" do
+      @provider.should_receive(:shell_out!).with("cave -L warning resolve -x \"=net/ntp-4.2.6_p5-r2\"")
+      @provider.upgrade_package("net/ntp", "4.2.6_p5-r2")
+    end
+  end
+
+  context "when uninstalling a package" do
+    it "should run pkg uninstall with the package name and version" do
+      @provider.should_receive(:shell_out!).with("cave -L warning uninstall -x \"=net/ntp-4.2.6_p5-r2\"")
+      @provider.remove_package("net/ntp", "4.2.6_p5-r2")
+    end
+
+  end
+end
